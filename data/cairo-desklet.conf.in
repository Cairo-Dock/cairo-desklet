#!en;@VERSION@
######## This is the conf file of Cairo-Desklet, released under the GPL.##########
######## It is parsed by cairo-dock to automatically generate an appropriate GUI,##########
######## so don't mess into it, except if you know what you're doing ! ;-)##########

[System]

#X-[Animations speed;@pkgdatadir@/icon-movment.png]
frame_mov =

#B- Animate sub-docks when they appear
animate subdocks = true

#I-[100;600;fast;slow] Animation unfolding duration:
#{Icons will appear folded on themselves and will then unfold until they fill the whole dock. The smaller this value, the faster this will be.}
unfold duration = 300

#v
sep_unfold =

#I-[4;40;fast;slow] Number of steps in the zoom animation (grow/shrink):
#{The more there are, the slower it will be}
grow nb steps = 10
#I-[4;40;fast;slow] ...
shrink nb steps = 8

#v
sep_unhide =

#I-[4;40;fast;slow] Number of steps in the auto-hide animation (move up/move down):
#{The more there are, the slower it will be}
move up nb steps = 10
#I-[4;40;fast;slow] ...
move down nb steps = 16

#X-[Refresh rate;gtk-execute]
frame_cpu =

#i-[5;40] Refresh rate when mouving cursor into the dock :
#{in Hz. This is to adjust behaviour relative to your CPU power.}
refresh frequency = 35

#i-[15;60] Animation frequency for the OpenGL backend :
#{in Hz. This is to adjust behaviour relative to your CPU power.}
opengl anim freq = 33

#i-[15;50] Animation frequency for the Cairo backend :
#{in Hz. This is to adjust behaviour relative to your CPU power.}
cairo anim freq = 25

#b- Reflections should be calculated in real-time?
#{The transparency gradation pattern will then be re-calculated in real time. May need more CPU power.}
dynamic reflection = false

#X-[Label readability;gtk-underline]
frame_label =

#b- Should the labels always be horizontal, even when dock is vertical?
always horizontal = true

#f-[0.;50.] label's visibility threshold :
#{the bigger, the more the labels next to the selected icon will be transparent.}
alpha threshold = 10.

#m[Captions] Configure labels appearence.
config_labels = 

#X-[Composition;gtk-clear]
frame_fake =
#b- Emulate composition with fake transparency?
#{Only use this if you don't run a composite manager like Compiz, xcompmgr, etc and have a black background around your dock. For aesthetic reasons, the dock will be kept under other windows.}
fake transparency = false

#b- Make the config panel transparent?
#{You need to re-open the panel. It is deactivated by default on KDE.}
config transparency = false

#X-[Files;gtk-file]
frame_file =

#b- Show hidden files?
show hidden files = false

#X-[Connection to the themes' server;gtk-network]
frame_conn =

#i-[1;20] Connection timeout to the themes' server :
#{Maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase,  once the dock has connected this option is of no more use.}
conn timeout = 7

#i-[10;300] Maximum time to download a theme:
#{Maximum time in seconds that you allow the whole operation to last. Some themes can be up to a few MB.}
conn max time = 120

#B-[4] Are you behind a proxy ?
#{Use this option if you connect to the Internet through a proxy.}
conn use proxy = false

#s- Proxy name :
conn proxy =

#i- Port :
conn port = 0

#s- User :
#{Let empty if you don't need to log-in to the proxy with a user/password.}
conn user =

#p- Password :
#{Let empty if you don't need to log-in to the proxy with a user/password.}
conn user =

modules=


[Dialogs]

#F+[Bubble;@pkgdatadir@/icon-bubble.png]
frame_bubble =

#C+ Background colour of the bubble:
background color = 1.0; 1.0; 1.0; 0.8

#v
sep_bul=

#t+ Shape of the bubble:
decorator = comics

#F+[Text;gtk-select-font]
frame_text =

#B+ Use a custom font for the text?
#{Otherwise the default's system one will be used.}
custom = false

#P+ Text font:
message police = 

#b+ Draw the outline of the text?
outlined = false

#c+ Text color:
text color = 0.0; 0.0; 0.0

#F+[Buttons;@pkgdatadir@/icon-buttons.png]
frame_button =

#j+[10;64] Size of buttons in the info-bubbles (width x height) :
#{in pixels.}
button size = 36;36

#S+ Name of an image to use for the yes/ok button :
#{If you don't provide any, a default image will be used.}
button_ok image = 

#S+ Name of an image to use for the no/cancel button :
#{If you don't provide any, a default image will be used.}
button_cancel image = 

#F+
fin_button =

#i+[16;96] Size of the icon displayed next to the text :
icon size = 48


[Desklets]

#F+[Decorations;gtk-paste]
frame_deco =

#O+ Choose a default decoration for all desklets :
#{This can be customized for each desklet separately.
#Choose 'Custom decoration' to define your own decorations below}
decorations = clear

#v
sep_deco =

#S+ Background image :
#{It's an image that will be displayed below the drawings, like a frame for example. Leave empty to not use any.}
bg desklet =
#e+[0;1;Transparent;Opaque] Background transparency :
bg alpha = 1
#i+[0;256] Left offset :
#{in pixels. Use this to adjust the left position of the drawings.}
left offset = 0
#i+[0;256] Top offset :
#{in pixels. Use this to adjust the top position of the drawings.}
top offset = 0
#i+[0;256] Right offset :
#{in pixels. Use this to adjust the right position of the drawings.}
right offset = 0
#i+[0;256] Bottom offset :
#{in pixels. Use this to adjust the bottom position of the drawings.}
bottom offset = 0
#S+ Foreground image :
#{It's an image that will be displayed above the drawings, like a reflection for example. Leave empty to not use any.}
fg desklet =
#e+[0;1;Transparent;Opaque] Foreground tansparency :
fg alpha = 1

#F+[Buttons;gtk-close]
frame_button =

#i+[4;28] Buttons size :
button size = 16

#S+ Name of an image to use for the 'rotate' button :
#{If you don't provide any, a default image will be used.}
rotate image = 

#S+ Name of an image to use for the 'reattach' button :
#{If you don't provide any, a default image will be used.}
retach image = 

#S+ Name of an image to use for the 'depth rotate' button :
#{If you don't provide any, a default image will be used.}
depth rotate image = 

#S+ Name of an image to use for the 'rotate' button :
#{If you don't provide any, a default image will be used.}
no input image = 


[Icons]

#F+[Icons' themes;gtk-select-color]
frame_theme=

#w+ Choose an icon theme :
#{Leave empty to use the current icon theme of your system. You can enter the name of a theme that is installed on your system (like 'Gartoon' or 'Human'), or even a path to a folder containing icons.}
default icon directory = 

#S+ Image filename to use as a background for icons :
#{Any format allowed; leave this field empty if you don't want to use an image as background.}
icons bg =

#F+[Zoom effect;@pkgdatadir@/icon-wave.png]
frame_shape =
#f+[1;5] Maximum zoom of the icons :
#{set to 1 if you don't want the icons to zoom when you hover over them.}
zoom max = 2.0

#i+[1;999] Width of the space in which the zoom will be effective :
#{in pixels. Outside of this space (centered on the mouse), there is no zoom.}
sinusoid width = 300

#i+[0;50] Space between icons :
#{in pixels.}
icon gap = 0

#F+[Reflections]
frame_refl =

#e+[0;1;light;strong] Reflective power of the plane :
#{It is its albedo (reflectivity); at 1 the icons reflect to the maximum, at 0 reflections are not used.}
albedo = .8

#e+[0;1;small;tall] Height of the reflection:
#{In percent of the icon's size. This parameter influence the total height of the dock.}
field depth = 0.5

#e+[0;1;Transparent;Opaque] Icons' transparency at rest :
#{It is their transparency when the dock is at rest; they will "materialize" progressively as the dock grows up. The closer to 0, the more transparent they will be.}
alpha at rest = 1

#X+[Icons size]
frame_size =

#j+[10;128] Launcher's size at rest (width x height) :
launcher size = 48;48

#j+[10;128] Application's size at rest (width x height) :
appli size = 48;48

#j+[10;128] Applet's size at rest (width x height) :
applet size = 48;48

#m[Animated icons] Configure icons' animations.
config_anim = 

#M[icon effects] Configure icons' special effects (requires OpenGL).
config_effect = 

#M[illusion] Configure icons' animations on appearing/disappearing (require OpenGL capacity).
config_illusion = 

#X+[Separators]
frame_sep =

#j+[4;64] Icon size at rest (width x height) :
separator size = 48;48

#Y+[Use an image.;1;4;Flat separator;4;1;Physical separator;0;0] How to draw the separators?
#{Only the default, 3D-plane and curve views support flat and physical separators. Flat separators are rendered differently according to the view.}
separator type = 0

#S+ Filename of an image to use for separators :
#{If you don't provide one, blanks will be used.}
separator image = separateur.svg

#b+ Make the separator's image revolve when dock is on top/on the left/on the right?
revolve separator image = true

#b+ Force separator's image size to stay constant?
force size = false

#C+ Colour of flat separators :
separator color = 0.9;0.9;0.9;1.0


#X+[Icons order]
frame_order =

#Y+[No;0;0;Separate applications from others;1;1;Separate applets from others;1;1;Separate all;1;1] Separate the different types of icons?
#{If you separate a type of icons, the icons of this type will be placed together, separated from the others by a separator.
#If you don't separate the icons, you can place them wherever you want, and insert separators manually. Applications will then be placed next to their launcher if they have one, or after the last launcher.}
separate_icons = 0

#T+[launchers;applications;applets] Order of the different types of icons :
icon's type order = 0;1;2


#X+[Link the icons with a string]
frame_string =

#i+[0;20] Linewidth of the string, in pixels (0 to not use string) :
string width = 0

#C+ Colour of the string (red, blue, green, alpha) :
string color = 0.0; 0.0; 0.8; 0.4


[Indicators]

#F+[Indicator of the active window]
frame_window =

#Y+[Image;1;1;Frame;2;3] Type of indicator:
active indic type = 1

#S+ Image file:
active indicator =

#C+ Colour of the frame :
#{Set transparency to 0 if you don't want to use an indicator.}
active color = 0.; 0.4; 0.8; 0.5

#i+[0;20] Linewidth of the frame around the active window :
#{Set 0 to fill the frame.}
active line width = 3

#i+[0;30] Corner radius of the frame around the active window :
active corner radius = 6

#v
sep_active =

#b+ Draw indicator above the icon?
active frame position = true


#F+[Indicator of active launcher]
frame_launch =

#S+ Image file:
#{Indicators are drawn on launchers icons to show that they have already been launched. Leave blank to use the default one.}
indicator image = 

#b- Display an indicator on application icons too ?
#{The indicator is drawn on active launchers, but you may want to display it on applications too.}
indic on appli = false

#v
sep_ind =

#e+[-0.2;1.2] Vertical offset :
#{Relatively to the icons' size. You can use this parameter to adjust the indicator's vertical position.
#If the indicator is linked to the icon, the offset will be upwards, otherwise downwards.}
indicator offset = -0.03

#b+ Link the indicator with its icon?
#{If the indicator is linked to the icon, it will then be zoomed like the icon and the offset will be upwards.
#Otherwise it will be drawn directly on the dock and the offset will be downwards.}
indicator on icon = true

#e+[0.1;1.5;smaller;bigger] Indicator size ratio :
#{You can choose to make the indicator smaller or bigger than the icons. The bigger the value is, the bigger the indicator is. 1 means the indicator will have the same size as the icons.}
indicator ratio = 1.

#b+ Rotate the indicator with dock?
#{Use it to make the indicator follow the orientation of the dock (top/bottom/right/left).}
rotate indicator = true

#b+ Draw indicator above the icon?
indicator above = true


#F+[Indicator of grouped windows]
frame_class =

#Y[Draw an image;1;2;Draw the sub-dock's icons as a stack;0;0] How to show that several icons are grouped :
use class indic = 0 

#S+ Image file:
#{It only makes sense if you chose to group the applis of the same class together. Leave blank to use the default one.}
class indicator = 

#b+ Zoom the indicator with its icon?
zoom class = false


[Labels]

#l+[No;On pointed icon;On all icons] Show labels:
show_labels = 1

#F+[Font;gtk-select-font]
frame_font =

#B+ Use a custom font for labels?
#{Otherwise the default's system one will be used.}
custom = false

#P+ Font used for labels :
police = 

#b+ Draw the outline of the text?
text oulined = true

#F+[Colour;gtk-select-color]
frame_col =

#c+ Start color :
#{It's the first color of the gradation.}
text color start = 1;1;1

#c+ Stop color :
#{It's the second color of the gradation. Set it to the same value as the first if you don't want to have any gradation.}
text color stop = 1;1;1

#b+ Pattern should be vertical?
#{If checked, the pattern will go from top to bottom, otherwise from left to right.}
vertical label pattern = false

#F+[Background;gtk-orientation-portrait]
frame_bg =

#C+ Colour of the label's background :
#{If you set it to fully transparent, there will be no background for the text, but the margin around the text will still be in effect.}
text background color = 0;0;0;.5

#b+ Use background color for labels?
#{If false, only the quick-info will have this background color.}
background for label = false

#i+[0;20] Margin around the text (in pixels) :
text margin = 4
